#summary Frequenty Asked Questions

=== ===

== Can CREST be used under Cygwin? ==

Yes, but two changes are necessary to build CREST under Cygwin.

First, `addr_t` cannot be used as a typedef under Cygwin, so all uses of `addr_t` must be renamed.  This can be done with `sed`:
{{{
sed -i -e 's/addr_t/addr2_t/g' src/*/*
}}} 

Some users have reported that `id_t` must also be renamed.

Second, there is no separate `rt` library under Cygwin, so `-lrt` must be removed from `LOADLIBeS` in `src/Makefile`:
{{{
8c8
< LOADLIBES = -lyices -lrt
---
> LOADLIBES = -lyices
}}}

=== ===

=== ===

=== ===

== Can CREST be used on multi-file programs? ==

Yes.  The easiest way to do this is to use CIL to merge all of the source files into a single file, and then run crestc on the merged file.

For further information on merging souce files with CIL, see (from the CIL documentation): [http://hal.cs.berkeley.edu/cil/merger.html Using the merger].

As an example, for GNU grep 2.2, it is sufficient to patch `src/Makefile` with (after running `configure`):

{{{
45c45
< AUTOMAKE = automake
---
> AUTOMAKE = echo
63c63
< CC = gcc
---
> CC = cilly
116c116
< LDFLAGS = 
---
> LDFLAGS = --merge --keepmerged
133c133
< CFLAGS = -g -O2
---
> CFLAGS = --merge -g -O2
}}}

and then to simply run `make` in the `src/` directory.  This will produce a combined source file `grep_comb.c`, as well as executable `grep`.

(Changing AUTOMAKE should not be necessary, but I cannot get this to work on my machine without this change.)


=== ===

=== ===

=== ===


== Does CREST save the exact set of branches that it covers during testing? ==

Yes.  These branches are written to the file `coverage` in the working directory.  The file is a list of branch identifier numbers, one per line.

Unfortunately, it is somewhat difficult to match these identifier numbers back to branches in the program under test.  Currently, the only way to do this is to find the branch ID numbers in the CIL-instrumented source for the test program.  (When run on a file `test.c`, `crestc` produces an instrumented source file `test.cil.c`.)  Every branch in the instrumented file will contain an instrumentation call:
{{{
__CrestBranch(statement-id, branch-id, true/false);
}}}
For example, the call
{{{
if (a == 0) {
  __CrestBranch(47, 18, 1);
  ...
}}}
indicates that this branch has identifier 18 (and is the "true" branch of the conditional `if (a == 0)`).


=== ===

=== ===

=== ===


== Does CREST save the test inputs it generates? ==

No. CREST does not currently save the inputs it generates during testing.

If you need this feature, it can be implemented by adding only a few lines of code to `src/run_crest/concolic_search.cc`.  In method `Search::RunProgram()`, just before the call to `LaunchProgram()`, add:
{{{
  // Save the given inputs.
  char fname[32];
  snprintf(fname, 32, "input.%d", num_iters_);
  WriteInputToFileOrDie(fname, inputs);
}}}

=== ===

=== ===

=== ===


== How do I run CREST on the GNU grep example? ==

Once you have compiled/instrumented grep, use:
{{{
  run_crest './grep aaaaaaaaaa /dev/null' 100 -random
}}}

This runs grep with a regexp/pattern of 10 symbolic characters.  The output should look something like:
{{{
  Iteration 0 (0s): covered 0 branches [0 reach funs, 0 reach branches].
  RESET

  Iteration 1 (0s): covered 446 branches [40 reach funs, 2448 reach branches].
  Solved 690/1455


  Iteration 2 (0s): covered 459 branches [40 reach funs, 2448 reach branches].
  Solved 10/1122
  |
  ...
}}}


(We modified grep so that it makes the regular expression symbolic, but
it still expects grep to be run with a regexp argument to specify the
length.  E.g., above "aaaaaaaaaa" indicates a symbolic regexp of length 10.)

Similarly, although no characters will be read from the given file --
symbolic characters will be read instead -- a file argument must still
be given.  And grep must be able to open this file.  /dev/null
should always work.)